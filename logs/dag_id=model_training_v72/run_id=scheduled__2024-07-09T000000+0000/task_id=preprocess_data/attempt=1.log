[2024-07-10T22:39:27.132+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2024-07-10T22:39:27.142+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: model_training_v72.preprocess_data scheduled__2024-07-09T00:00:00+00:00 [queued]>
[2024-07-10T22:39:27.147+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: model_training_v72.preprocess_data scheduled__2024-07-09T00:00:00+00:00 [queued]>
[2024-07-10T22:39:27.147+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 2
[2024-07-10T22:39:27.156+0000] {taskinstance.py:2330} INFO - Executing <Task(PythonOperator): preprocess_data> on 2024-07-09 00:00:00+00:00
[2024-07-10T22:39:27.162+0000] {warnings.py:110} WARNING - /home/airflow/.local/lib/python3.12/site-packages/airflow/task/task_runner/standard_task_runner.py:61: DeprecationWarning: This process (pid=636) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-07-10T22:39:27.163+0000] {standard_task_runner.py:63} INFO - Started process 657 to run task
[2024-07-10T22:39:27.163+0000] {standard_task_runner.py:90} INFO - Running: ['airflow', 'tasks', 'run', 'model_training_v72', 'preprocess_data', 'scheduled__2024-07-09T00:00:00+00:00', '--job-id', '108', '--raw', '--subdir', 'DAGS_FOLDER/model_training.py', '--cfg-path', '/tmp/tmpja4twhum']
[2024-07-10T22:39:27.164+0000] {standard_task_runner.py:91} INFO - Job 108: Subtask preprocess_data
[2024-07-10T22:39:27.196+0000] {task_command.py:426} INFO - Running <TaskInstance: model_training_v72.preprocess_data scheduled__2024-07-09T00:00:00+00:00 [running]> on host 95d2f1320dbe
[2024-07-10T22:39:27.247+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='airflow' AIRFLOW_CTX_DAG_ID='model_training_v72' AIRFLOW_CTX_TASK_ID='preprocess_data' AIRFLOW_CTX_EXECUTION_DATE='2024-07-09T00:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-07-09T00:00:00+00:00'
[2024-07-10T22:39:27.248+0000] {taskinstance.py:430} INFO - ::endgroup::
[2024-07-10T22:39:27.304+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  драма
[2024-07-10T22:39:27.305+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  комедия
[2024-07-10T22:39:27.306+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  криминал
[2024-07-10T22:39:27.308+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  ужасы
[2024-07-10T22:39:27.309+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  фантастика
[2024-07-10T22:39:27.311+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  триллер
[2024-07-10T22:39:27.312+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  семейный
[2024-07-10T22:39:27.313+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  документальный
[2024-07-10T22:39:27.315+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  биография
[2024-07-10T22:39:27.316+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  боевик
[2024-07-10T22:39:27.318+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  короткометражка
[2024-07-10T22:39:27.319+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  детектив
[2024-07-10T22:39:27.320+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  история
[2024-07-10T22:39:27.321+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  мелодрама
[2024-07-10T22:39:27.323+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  приключения
[2024-07-10T22:39:27.322+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  музыка
[2024-07-10T22:39:27.323+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  военный
[2024-07-10T22:39:27.325+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  фэнтези
[2024-07-10T22:39:27.327+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  мюзикл
[2024-07-10T22:39:27.341+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  спорт
[2024-07-10T22:39:27.343+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  детский
[2024-07-10T22:39:27.345+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  реальное ТВ
[2024-07-10T22:39:27.348+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  вестерн
[2024-07-10T22:39:27.351+0000] {logging_mixin.py:188} INFO - Добавлена страна:  США
[2024-07-10T22:39:27.355+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Грузия
[2024-07-10T22:39:27.357+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Россия
[2024-07-10T22:39:27.359+0000] {logging_mixin.py:188} INFO - Добавлена страна:  СССР
[2024-07-10T22:39:27.361+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Чехия
[2024-07-10T22:39:27.363+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Италия
[2024-07-10T22:39:27.365+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Испания
[2024-07-10T22:39:27.367+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Казахстан
[2024-07-10T22:39:27.369+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Греция
[2024-07-10T22:39:27.370+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Франция
[2024-07-10T22:39:27.372+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Япония
[2024-07-10T22:39:27.373+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Нидерланды
[2024-07-10T22:39:27.375+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Швейцария
[2024-07-10T22:39:27.377+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Австралия
[2024-07-10T22:39:27.378+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Словения
[2024-07-10T22:39:27.380+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Хорватия
[2024-07-10T22:39:27.382+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Латвия
[2024-07-10T22:39:27.383+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Великобритания
[2024-07-10T22:39:27.385+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Австрия
[2024-07-10T22:39:27.386+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Чили
[2024-07-10T22:39:27.387+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Португалия
[2024-07-10T22:39:27.389+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Германия
[2024-07-10T22:39:27.390+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Словакия
[2024-07-10T22:39:27.392+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Китай
[2024-07-10T22:39:27.393+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Беларусь
[2024-07-10T22:39:27.395+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Индия
[2024-07-10T22:39:27.396+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Алжир
[2024-07-10T22:39:27.398+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Мексика
[2024-07-10T22:39:27.399+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Канада
[2024-07-10T22:39:27.400+0000] {logging_mixin.py:188} INFO - Добавлена страна:  ОАЭ
[2024-07-10T22:39:27.401+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Турция
[2024-07-10T22:39:27.403+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Коста-Рика
[2024-07-10T22:39:27.404+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Исландия
[2024-07-10T22:39:27.405+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Норвегия
[2024-07-10T22:39:27.406+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Израиль
[2024-07-10T22:39:27.408+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Украина
[2024-07-10T22:39:27.409+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Аргентина
[2024-07-10T22:39:27.410+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Гонконг
[2024-07-10T22:39:27.411+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Бельгия
[2024-07-10T22:39:27.412+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Венгрия
[2024-07-10T22:39:27.414+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Таиланд
[2024-07-10T22:39:27.415+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Польша
[2024-07-10T22:39:27.416+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Дания
[2024-07-10T22:39:27.417+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Швеция
[2024-07-10T22:39:27.418+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Эстония
[2024-07-10T22:39:27.420+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Кыргызстан
[2024-07-10T22:39:27.421+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Новая Зеландия
[2024-07-10T22:39:27.422+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Корея Южная
[2024-07-10T22:39:27.423+0000] {logging_mixin.py:188} INFO - Добавлена страна:  ЮАР
[2024-07-10T22:39:27.425+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Бразилия
[2024-07-10T22:39:27.426+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Филиппины
[2024-07-10T22:39:27.428+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Мальта
[2024-07-10T22:39:27.429+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Уругвай
[2024-07-10T22:39:27.431+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Ирландия
[2024-07-10T22:39:27.432+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Ливан
[2024-07-10T22:39:27.434+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Болгария
[2024-07-10T22:39:27.436+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Доминикана
[2024-07-10T22:39:27.437+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Чехословакия
[2024-07-10T22:39:27.438+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Сербия
[2024-07-10T22:39:27.439+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Германия (ГДР)
[2024-07-10T22:39:27.440+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Кипр
[2024-07-10T22:39:27.442+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Тайвань
[2024-07-10T22:39:27.443+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Люксембург
[2024-07-10T22:39:27.444+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Румыния
[2024-07-10T22:39:27.445+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Колумбия
[2024-07-10T22:39:27.447+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Азербайджан
[2024-07-10T22:39:27.451+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.451+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Вьетнам
[2024-07-10T22:39:27.452+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.453+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Марокко
[2024-07-10T22:39:27.454+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.454+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Тунис
[2024-07-10T22:39:27.456+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.456+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Югославия
[2024-07-10T22:39:27.457+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.457+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Пакистан
[2024-07-10T22:39:27.458+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.459+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Перу
[2024-07-10T22:39:27.460+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.460+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Индонезия
[2024-07-10T22:39:27.461+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.461+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Малайзия
[2024-07-10T22:39:27.463+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.463+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Германия (ФРГ)
[2024-07-10T22:39:27.464+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.465+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Литва
[2024-07-10T22:39:27.466+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.466+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Армения
[2024-07-10T22:39:27.468+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.468+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Иран
[2024-07-10T22:39:27.469+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.469+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Финляндия
[2024-07-10T22:39:27.470+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.471+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Босния и Герцеговина
[2024-07-10T22:39:27.472+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.472+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Саудовская Аравия
[2024-07-10T22:39:27.473+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.473+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Катар
[2024-07-10T22:39:27.475+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.475+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Сингапур
[2024-07-10T22:39:27.477+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.477+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Эквадор
[2024-07-10T22:39:27.478+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.478+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Египет
[2024-07-10T22:39:27.479+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.480+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Багамы
[2024-07-10T22:39:27.481+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.481+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Пуэрто Рико
[2024-07-10T22:39:27.483+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.483+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Монако
[2024-07-10T22:39:27.484+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.484+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Руанда
[2024-07-10T22:39:27.485+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.486+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Ватикан
[2024-07-10T22:39:27.487+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:113: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T22:39:27.487+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Панама
[2024-07-10T22:39:27.489+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:45: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data[f"{feature}_transformed"] = le.transform(data[feature])

[2024-07-10T22:39:27.491+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:45: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data[f"{feature}_transformed"] = le.transform(data[feature])

[2024-07-10T22:39:27.572+0000] {python.py:237} INFO - Done. Returned value was: None
[2024-07-10T22:39:27.572+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2024-07-10T22:39:27.582+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=model_training_v72, task_id=preprocess_data, run_id=scheduled__2024-07-09T00:00:00+00:00, execution_date=20240709T000000, start_date=20240710T223927, end_date=20240710T223927
[2024-07-10T22:39:27.615+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2024-07-10T22:39:27.625+0000] {taskinstance.py:3498} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2024-07-10T22:39:27.628+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
