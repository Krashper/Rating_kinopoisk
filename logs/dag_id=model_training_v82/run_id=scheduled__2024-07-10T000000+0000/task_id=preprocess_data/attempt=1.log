[2024-07-11T00:13:57.158+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2024-07-11T00:13:57.169+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: model_training_v82.preprocess_data scheduled__2024-07-10T00:00:00+00:00 [queued]>
[2024-07-11T00:13:57.173+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: model_training_v82.preprocess_data scheduled__2024-07-10T00:00:00+00:00 [queued]>
[2024-07-11T00:13:57.174+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 2
[2024-07-11T00:13:57.182+0000] {taskinstance.py:2330} INFO - Executing <Task(PythonOperator): preprocess_data> on 2024-07-10 00:00:00+00:00
[2024-07-11T00:13:57.188+0000] {warnings.py:110} WARNING - /home/airflow/.local/lib/python3.12/site-packages/airflow/task/task_runner/standard_task_runner.py:61: DeprecationWarning: This process (pid=7069) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-07-11T00:13:57.189+0000] {standard_task_runner.py:63} INFO - Started process 7097 to run task
[2024-07-11T00:13:57.189+0000] {standard_task_runner.py:90} INFO - Running: ['airflow', 'tasks', 'run', 'model_training_v82', 'preprocess_data', 'scheduled__2024-07-10T00:00:00+00:00', '--job-id', '195', '--raw', '--subdir', 'DAGS_FOLDER/model_training.py', '--cfg-path', '/tmp/tmp7x9rxjnd']
[2024-07-11T00:13:57.190+0000] {standard_task_runner.py:91} INFO - Job 195: Subtask preprocess_data
[2024-07-11T00:13:57.223+0000] {task_command.py:426} INFO - Running <TaskInstance: model_training_v82.preprocess_data scheduled__2024-07-10T00:00:00+00:00 [running]> on host 9211d7c5a4db
[2024-07-11T00:13:57.276+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='airflow' AIRFLOW_CTX_DAG_ID='model_training_v82' AIRFLOW_CTX_TASK_ID='preprocess_data' AIRFLOW_CTX_EXECUTION_DATE='2024-07-10T00:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-07-10T00:00:00+00:00'
[2024-07-11T00:13:57.277+0000] {taskinstance.py:430} INFO - ::endgroup::
[2024-07-11T00:13:57.490+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  драма
[2024-07-11T00:13:57.492+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  комедия
[2024-07-11T00:13:57.494+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  криминал
[2024-07-11T00:13:57.496+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  ужасы
[2024-07-11T00:13:57.498+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  фантастика
[2024-07-11T00:13:57.500+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  триллер
[2024-07-11T00:13:57.502+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  семейный
[2024-07-11T00:13:57.503+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  документальный
[2024-07-11T00:13:57.505+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  биография
[2024-07-11T00:13:57.507+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  боевик
[2024-07-11T00:13:57.509+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  короткометражка
[2024-07-11T00:13:57.511+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  детектив
[2024-07-11T00:13:57.513+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  история
[2024-07-11T00:13:57.515+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  мелодрама
[2024-07-11T00:13:57.517+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  приключения
[2024-07-11T00:13:57.519+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  музыка
[2024-07-11T00:13:57.520+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  военный
[2024-07-11T00:13:57.522+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  фэнтези
[2024-07-11T00:13:57.524+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  мюзикл
[2024-07-11T00:13:57.526+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  спорт
[2024-07-11T00:13:57.528+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  детский
[2024-07-11T00:13:57.530+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  реальное ТВ
[2024-07-11T00:13:57.532+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  вестерн
[2024-07-11T00:13:57.534+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  фильм-нуар
[2024-07-11T00:13:57.540+0000] {logging_mixin.py:188} INFO - Добавлена страна:  США
[2024-07-11T00:13:57.542+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Грузия
[2024-07-11T00:13:57.544+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Россия
[2024-07-11T00:13:57.545+0000] {logging_mixin.py:188} INFO - Добавлена страна:  СССР
[2024-07-11T00:13:57.548+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Чехия
[2024-07-11T00:13:57.549+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Италия
[2024-07-11T00:13:57.551+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Испания
[2024-07-11T00:13:57.553+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Казахстан
[2024-07-11T00:13:57.555+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Греция
[2024-07-11T00:13:57.556+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Франция
[2024-07-11T00:13:57.558+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Япония
[2024-07-11T00:13:57.560+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Нидерланды
[2024-07-11T00:13:57.562+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Швейцария
[2024-07-11T00:13:57.564+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Австралия
[2024-07-11T00:13:57.565+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Словения
[2024-07-11T00:13:57.567+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Хорватия
[2024-07-11T00:13:57.569+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Латвия
[2024-07-11T00:13:57.571+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Великобритания
[2024-07-11T00:13:57.572+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Австрия
[2024-07-11T00:13:57.574+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Чили
[2024-07-11T00:13:57.576+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Португалия
[2024-07-11T00:13:57.577+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Германия
[2024-07-11T00:13:57.579+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Словакия
[2024-07-11T00:13:57.581+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Китай
[2024-07-11T00:13:57.583+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Беларусь
[2024-07-11T00:13:57.585+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Индия
[2024-07-11T00:13:57.587+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Алжир
[2024-07-11T00:13:57.588+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Мексика
[2024-07-11T00:13:57.590+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Канада
[2024-07-11T00:13:57.592+0000] {logging_mixin.py:188} INFO - Добавлена страна:  ОАЭ
[2024-07-11T00:13:57.593+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Турция
[2024-07-11T00:13:57.595+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Коста-Рика
[2024-07-11T00:13:57.597+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Исландия
[2024-07-11T00:13:57.599+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Норвегия
[2024-07-11T00:13:57.601+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Израиль
[2024-07-11T00:13:57.603+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Украина
[2024-07-11T00:13:57.606+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Аргентина
[2024-07-11T00:13:57.609+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Гонконг
[2024-07-11T00:13:57.614+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Бельгия
[2024-07-11T00:13:57.616+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Венгрия
[2024-07-11T00:13:57.618+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Таиланд
[2024-07-11T00:13:57.620+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Польша
[2024-07-11T00:13:57.622+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Дания
[2024-07-11T00:13:57.624+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Швеция
[2024-07-11T00:13:57.626+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Эстония
[2024-07-11T00:13:57.627+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Кыргызстан
[2024-07-11T00:13:57.629+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Новая Зеландия
[2024-07-11T00:13:57.631+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Корея Южная
[2024-07-11T00:13:57.633+0000] {logging_mixin.py:188} INFO - Добавлена страна:  ЮАР
[2024-07-11T00:13:57.635+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Бразилия
[2024-07-11T00:13:57.637+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Филиппины
[2024-07-11T00:13:57.639+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Мальта
[2024-07-11T00:13:57.641+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Уругвай
[2024-07-11T00:13:57.642+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Ирландия
[2024-07-11T00:13:57.644+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Ливан
[2024-07-11T00:13:57.646+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Болгария
[2024-07-11T00:13:57.648+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Доминикана
[2024-07-11T00:13:57.650+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Чехословакия
[2024-07-11T00:13:57.652+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Сербия
[2024-07-11T00:13:57.654+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Германия (ГДР)
[2024-07-11T00:13:57.655+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Кипр
[2024-07-11T00:13:57.657+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Тайвань
[2024-07-11T00:13:57.659+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Люксембург
[2024-07-11T00:13:57.661+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Румыния
[2024-07-11T00:13:57.663+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Колумбия
[2024-07-11T00:13:57.670+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.670+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Азербайджан
[2024-07-11T00:13:57.672+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.673+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Вьетнам
[2024-07-11T00:13:57.675+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.675+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Марокко
[2024-07-11T00:13:57.677+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.677+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Тунис
[2024-07-11T00:13:57.679+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.680+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Югославия
[2024-07-11T00:13:57.681+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.682+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Пакистан
[2024-07-11T00:13:57.684+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.684+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Перу
[2024-07-11T00:13:57.686+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.686+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Индонезия
[2024-07-11T00:13:57.688+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.689+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Малайзия
[2024-07-11T00:13:57.690+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.691+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Германия (ФРГ)
[2024-07-11T00:13:57.693+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.693+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Литва
[2024-07-11T00:13:57.695+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.695+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Армения
[2024-07-11T00:13:57.697+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.697+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Иран
[2024-07-11T00:13:57.699+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.700+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Финляндия
[2024-07-11T00:13:57.702+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.702+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Босния и Герцеговина
[2024-07-11T00:13:57.704+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.704+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Саудовская Аравия
[2024-07-11T00:13:57.706+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.707+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Катар
[2024-07-11T00:13:57.708+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.709+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Сингапур
[2024-07-11T00:13:57.711+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.711+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Эквадор
[2024-07-11T00:13:57.713+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.714+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Египет
[2024-07-11T00:13:57.716+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.716+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Багамы
[2024-07-11T00:13:57.718+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.719+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Пуэрто Рико
[2024-07-11T00:13:57.721+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.721+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Монако
[2024-07-11T00:13:57.723+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.723+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Руанда
[2024-07-11T00:13:57.725+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.726+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Ватикан
[2024-07-11T00:13:57.727+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.728+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Панама
[2024-07-11T00:13:57.730+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.730+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Молдова
[2024-07-11T00:13:57.732+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.732+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Аруба
[2024-07-11T00:13:57.734+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.734+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Монголия
[2024-07-11T00:13:57.736+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.737+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Косово
[2024-07-11T00:13:57.738+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.739+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Северная Македония
[2024-07-11T00:13:57.740+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.741+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Албания
[2024-07-11T00:13:57.743+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.743+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Папуа - Новая Гвинея
[2024-07-11T00:13:57.745+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.745+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Венесуэла
[2024-07-11T00:13:57.747+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.748+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Остров Мэн
[2024-07-11T00:13:57.749+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.750+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Кения
[2024-07-11T00:13:57.752+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.752+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Иордания
[2024-07-11T00:13:57.754+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:13:57.754+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Сент-Китс и Невис
[2024-07-11T00:13:57.756+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data[f"{feature}_transformed"] = le.transform(data[feature])

[2024-07-11T00:13:57.767+0000] {base.py:84} INFO - Using connection ID 'minio' for task execution.
[2024-07-11T00:13:57.768+0000] {connection_wrapper.py:384} INFO - AWS Connection (conn_id='minio', conn_type='aws') credentials retrieved from login and password.
[2024-07-11T00:13:57.986+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data[f"{feature}_transformed"] = le.transform(data[feature])

[2024-07-11T00:13:57.998+0000] {base.py:84} INFO - Using connection ID 'minio' for task execution.
[2024-07-11T00:13:57.998+0000] {connection_wrapper.py:384} INFO - AWS Connection (conn_id='minio', conn_type='aws') credentials retrieved from login and password.
[2024-07-11T00:13:58.131+0000] {base.py:84} INFO - Using connection ID 'minio' for task execution.
[2024-07-11T00:13:58.131+0000] {connection_wrapper.py:384} INFO - AWS Connection (conn_id='minio', conn_type='aws') credentials retrieved from login and password.
[2024-07-11T00:13:58.246+0000] {base.py:84} INFO - Using connection ID 'minio' for task execution.
[2024-07-11T00:13:58.247+0000] {connection_wrapper.py:384} INFO - AWS Connection (conn_id='minio', conn_type='aws') credentials retrieved from login and password.
[2024-07-11T00:13:58.391+0000] {python.py:237} INFO - Done. Returned value was: None
[2024-07-11T00:13:58.391+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2024-07-11T00:13:58.398+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=model_training_v82, task_id=preprocess_data, run_id=scheduled__2024-07-10T00:00:00+00:00, execution_date=20240710T000000, start_date=20240711T001357, end_date=20240711T001358
[2024-07-11T00:13:58.448+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2024-07-11T00:13:58.462+0000] {taskinstance.py:3498} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-07-11T00:13:58.465+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
