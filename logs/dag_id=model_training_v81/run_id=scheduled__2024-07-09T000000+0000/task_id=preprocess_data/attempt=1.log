[2024-07-10T23:59:39.877+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2024-07-10T23:59:39.888+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: model_training_v81.preprocess_data scheduled__2024-07-09T00:00:00+00:00 [queued]>
[2024-07-10T23:59:39.893+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: model_training_v81.preprocess_data scheduled__2024-07-09T00:00:00+00:00 [queued]>
[2024-07-10T23:59:39.893+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 2
[2024-07-10T23:59:39.902+0000] {taskinstance.py:2330} INFO - Executing <Task(PythonOperator): preprocess_data> on 2024-07-09 00:00:00+00:00
[2024-07-10T23:59:39.908+0000] {warnings.py:110} WARNING - /home/airflow/.local/lib/python3.12/site-packages/airflow/task/task_runner/standard_task_runner.py:61: DeprecationWarning: This process (pid=4961) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-07-10T23:59:39.909+0000] {standard_task_runner.py:63} INFO - Started process 5001 to run task
[2024-07-10T23:59:39.909+0000] {standard_task_runner.py:90} INFO - Running: ['airflow', 'tasks', 'run', 'model_training_v81', 'preprocess_data', 'scheduled__2024-07-09T00:00:00+00:00', '--job-id', '179', '--raw', '--subdir', 'DAGS_FOLDER/model_training.py', '--cfg-path', '/tmp/tmplr0f94y8']
[2024-07-10T23:59:39.910+0000] {standard_task_runner.py:91} INFO - Job 179: Subtask preprocess_data
[2024-07-10T23:59:39.941+0000] {task_command.py:426} INFO - Running <TaskInstance: model_training_v81.preprocess_data scheduled__2024-07-09T00:00:00+00:00 [running]> on host 9211d7c5a4db
[2024-07-10T23:59:39.990+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='airflow' AIRFLOW_CTX_DAG_ID='model_training_v81' AIRFLOW_CTX_TASK_ID='preprocess_data' AIRFLOW_CTX_EXECUTION_DATE='2024-07-09T00:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-07-09T00:00:00+00:00'
[2024-07-10T23:59:39.991+0000] {taskinstance.py:430} INFO - ::endgroup::
[2024-07-10T23:59:40.067+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  драма
[2024-07-10T23:59:40.069+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  комедия
[2024-07-10T23:59:40.071+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  криминал
[2024-07-10T23:59:40.072+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  ужасы
[2024-07-10T23:59:40.074+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  фантастика
[2024-07-10T23:59:40.077+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  триллер
[2024-07-10T23:59:40.078+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  семейный
[2024-07-10T23:59:40.080+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  документальный
[2024-07-10T23:59:40.081+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  биография
[2024-07-10T23:59:40.083+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  боевик
[2024-07-10T23:59:40.085+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  короткометражка
[2024-07-10T23:59:40.086+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  детектив
[2024-07-10T23:59:40.088+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  история
[2024-07-10T23:59:40.090+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  мелодрама
[2024-07-10T23:59:40.092+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  приключения
[2024-07-10T23:59:40.094+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  музыка
[2024-07-10T23:59:40.095+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  военный
[2024-07-10T23:59:40.097+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  фэнтези
[2024-07-10T23:59:40.099+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  мюзикл
[2024-07-10T23:59:40.100+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  спорт
[2024-07-10T23:59:40.102+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  детский
[2024-07-10T23:59:40.104+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  реальное ТВ
[2024-07-10T23:59:40.105+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  вестерн
[2024-07-10T23:59:40.108+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  фильм-нуар
[2024-07-10T23:59:40.113+0000] {logging_mixin.py:188} INFO - Добавлена страна:  США
[2024-07-10T23:59:40.115+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Грузия
[2024-07-10T23:59:40.116+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Россия
[2024-07-10T23:59:40.118+0000] {logging_mixin.py:188} INFO - Добавлена страна:  СССР
[2024-07-10T23:59:40.120+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Чехия
[2024-07-10T23:59:40.121+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Италия
[2024-07-10T23:59:40.123+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Испания
[2024-07-10T23:59:40.125+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Казахстан
[2024-07-10T23:59:40.127+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Греция
[2024-07-10T23:59:40.128+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Франция
[2024-07-10T23:59:40.130+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Япония
[2024-07-10T23:59:40.132+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Нидерланды
[2024-07-10T23:59:40.133+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Швейцария
[2024-07-10T23:59:40.135+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Австралия
[2024-07-10T23:59:40.136+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Словения
[2024-07-10T23:59:40.138+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Хорватия
[2024-07-10T23:59:40.140+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Латвия
[2024-07-10T23:59:40.142+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Великобритания
[2024-07-10T23:59:40.145+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Австрия
[2024-07-10T23:59:40.148+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Чили
[2024-07-10T23:59:40.149+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Португалия
[2024-07-10T23:59:40.151+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Германия
[2024-07-10T23:59:40.153+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Словакия
[2024-07-10T23:59:40.154+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Китай
[2024-07-10T23:59:40.156+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Беларусь
[2024-07-10T23:59:40.158+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Индия
[2024-07-10T23:59:40.161+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Алжир
[2024-07-10T23:59:40.163+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Мексика
[2024-07-10T23:59:40.164+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Канада
[2024-07-10T23:59:40.166+0000] {logging_mixin.py:188} INFO - Добавлена страна:  ОАЭ
[2024-07-10T23:59:40.167+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Турция
[2024-07-10T23:59:40.169+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Коста-Рика
[2024-07-10T23:59:40.171+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Исландия
[2024-07-10T23:59:40.173+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Норвегия
[2024-07-10T23:59:40.174+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Израиль
[2024-07-10T23:59:40.176+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Украина
[2024-07-10T23:59:40.178+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Аргентина
[2024-07-10T23:59:40.180+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Гонконг
[2024-07-10T23:59:40.182+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Бельгия
[2024-07-10T23:59:40.183+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Венгрия
[2024-07-10T23:59:40.185+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Таиланд
[2024-07-10T23:59:40.187+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Польша
[2024-07-10T23:59:40.188+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Дания
[2024-07-10T23:59:40.190+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Швеция
[2024-07-10T23:59:40.192+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Эстония
[2024-07-10T23:59:40.193+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Кыргызстан
[2024-07-10T23:59:40.195+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Новая Зеландия
[2024-07-10T23:59:40.197+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Корея Южная
[2024-07-10T23:59:40.198+0000] {logging_mixin.py:188} INFO - Добавлена страна:  ЮАР
[2024-07-10T23:59:40.200+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Бразилия
[2024-07-10T23:59:40.202+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Филиппины
[2024-07-10T23:59:40.203+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Мальта
[2024-07-10T23:59:40.205+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Уругвай
[2024-07-10T23:59:40.207+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Ирландия
[2024-07-10T23:59:40.209+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Ливан
[2024-07-10T23:59:40.210+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Болгария
[2024-07-10T23:59:40.212+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Доминикана
[2024-07-10T23:59:40.213+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Чехословакия
[2024-07-10T23:59:40.215+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Сербия
[2024-07-10T23:59:40.217+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Германия (ГДР)
[2024-07-10T23:59:40.218+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Кипр
[2024-07-10T23:59:40.220+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Тайвань
[2024-07-10T23:59:40.221+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Люксембург
[2024-07-10T23:59:40.223+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Румыния
[2024-07-10T23:59:40.225+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Колумбия
[2024-07-10T23:59:40.228+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.229+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Азербайджан
[2024-07-10T23:59:40.230+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.231+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Вьетнам
[2024-07-10T23:59:40.232+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.233+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Марокко
[2024-07-10T23:59:40.234+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.234+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Тунис
[2024-07-10T23:59:40.236+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.236+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Югославия
[2024-07-10T23:59:40.238+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.238+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Пакистан
[2024-07-10T23:59:40.239+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.240+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Перу
[2024-07-10T23:59:40.241+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.242+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Индонезия
[2024-07-10T23:59:40.243+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.243+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Малайзия
[2024-07-10T23:59:40.245+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.245+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Германия (ФРГ)
[2024-07-10T23:59:40.247+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.248+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Литва
[2024-07-10T23:59:40.250+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.250+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Армения
[2024-07-10T23:59:40.252+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.252+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Иран
[2024-07-10T23:59:40.253+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.254+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Финляндия
[2024-07-10T23:59:40.255+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.255+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Босния и Герцеговина
[2024-07-10T23:59:40.257+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.257+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Саудовская Аравия
[2024-07-10T23:59:40.259+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.259+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Катар
[2024-07-10T23:59:40.261+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.261+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Сингапур
[2024-07-10T23:59:40.262+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.263+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Эквадор
[2024-07-10T23:59:40.264+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.265+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Египет
[2024-07-10T23:59:40.266+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.266+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Багамы
[2024-07-10T23:59:40.268+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.268+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Пуэрто Рико
[2024-07-10T23:59:40.270+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.270+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Монако
[2024-07-10T23:59:40.272+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.272+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Руанда
[2024-07-10T23:59:40.273+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.274+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Ватикан
[2024-07-10T23:59:40.276+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.276+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Панама
[2024-07-10T23:59:40.278+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.278+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Молдова
[2024-07-10T23:59:40.280+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.280+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Аруба
[2024-07-10T23:59:40.281+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.282+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Монголия
[2024-07-10T23:59:40.283+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.283+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Косово
[2024-07-10T23:59:40.285+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.285+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Северная Македония
[2024-07-10T23:59:40.287+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.287+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Албания
[2024-07-10T23:59:40.289+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.289+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Папуа - Новая Гвинея
[2024-07-10T23:59:40.292+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.292+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Венесуэла
[2024-07-10T23:59:40.294+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.294+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Остров Мэн
[2024-07-10T23:59:40.295+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.296+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Кения
[2024-07-10T23:59:40.297+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-10T23:59:40.298+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Иордания
[2024-07-10T23:59:40.300+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data[f"{feature}_transformed"] = le.transform(data[feature])

[2024-07-10T23:59:40.431+0000] {base.py:84} INFO - Using connection ID 'minio' for task execution.
[2024-07-10T23:59:40.432+0000] {connection_wrapper.py:384} INFO - AWS Connection (conn_id='minio', conn_type='aws') credentials retrieved from login and password.
[2024-07-10T23:59:40.620+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data[f"{feature}_transformed"] = le.transform(data[feature])

[2024-07-10T23:59:40.628+0000] {base.py:84} INFO - Using connection ID 'minio' for task execution.
[2024-07-10T23:59:40.628+0000] {connection_wrapper.py:384} INFO - AWS Connection (conn_id='minio', conn_type='aws') credentials retrieved from login and password.
[2024-07-10T23:59:40.709+0000] {base.py:84} INFO - Using connection ID 'minio' for task execution.
[2024-07-10T23:59:40.710+0000] {connection_wrapper.py:384} INFO - AWS Connection (conn_id='minio', conn_type='aws') credentials retrieved from login and password.
[2024-07-10T23:59:40.881+0000] {base.py:84} INFO - Using connection ID 'minio' for task execution.
[2024-07-10T23:59:40.881+0000] {connection_wrapper.py:384} INFO - AWS Connection (conn_id='minio', conn_type='aws') credentials retrieved from login and password.
[2024-07-10T23:59:41.013+0000] {python.py:237} INFO - Done. Returned value was: None
[2024-07-10T23:59:41.014+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2024-07-10T23:59:41.020+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=model_training_v81, task_id=preprocess_data, run_id=scheduled__2024-07-09T00:00:00+00:00, execution_date=20240709T000000, start_date=20240710T235939, end_date=20240710T235941
[2024-07-10T23:59:41.049+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2024-07-10T23:59:41.059+0000] {taskinstance.py:3498} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2024-07-10T23:59:41.062+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
