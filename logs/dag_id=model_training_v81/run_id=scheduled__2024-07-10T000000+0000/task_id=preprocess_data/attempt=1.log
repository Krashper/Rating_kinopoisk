[2024-07-11T00:00:06.095+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2024-07-11T00:00:06.105+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: model_training_v81.preprocess_data scheduled__2024-07-10T00:00:00+00:00 [queued]>
[2024-07-11T00:00:06.110+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: model_training_v81.preprocess_data scheduled__2024-07-10T00:00:00+00:00 [queued]>
[2024-07-11T00:00:06.110+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 2
[2024-07-11T00:00:06.119+0000] {taskinstance.py:2330} INFO - Executing <Task(PythonOperator): preprocess_data> on 2024-07-10 00:00:00+00:00
[2024-07-11T00:00:06.125+0000] {warnings.py:110} WARNING - /home/airflow/.local/lib/python3.12/site-packages/airflow/task/task_runner/standard_task_runner.py:61: DeprecationWarning: This process (pid=5131) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-07-11T00:00:06.126+0000] {standard_task_runner.py:63} INFO - Started process 5152 to run task
[2024-07-11T00:00:06.126+0000] {standard_task_runner.py:90} INFO - Running: ['airflow', 'tasks', 'run', 'model_training_v81', 'preprocess_data', 'scheduled__2024-07-10T00:00:00+00:00', '--job-id', '184', '--raw', '--subdir', 'DAGS_FOLDER/model_training.py', '--cfg-path', '/tmp/tmpx18j5lr0']
[2024-07-11T00:00:06.128+0000] {standard_task_runner.py:91} INFO - Job 184: Subtask preprocess_data
[2024-07-11T00:00:06.181+0000] {task_command.py:426} INFO - Running <TaskInstance: model_training_v81.preprocess_data scheduled__2024-07-10T00:00:00+00:00 [running]> on host 9211d7c5a4db
[2024-07-11T00:00:06.235+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='airflow' AIRFLOW_CTX_DAG_ID='model_training_v81' AIRFLOW_CTX_TASK_ID='preprocess_data' AIRFLOW_CTX_EXECUTION_DATE='2024-07-10T00:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-07-10T00:00:00+00:00'
[2024-07-11T00:00:06.236+0000] {taskinstance.py:430} INFO - ::endgroup::
[2024-07-11T00:00:06.368+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  драма
[2024-07-11T00:00:06.370+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  комедия
[2024-07-11T00:00:06.372+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  криминал
[2024-07-11T00:00:06.374+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  ужасы
[2024-07-11T00:00:06.376+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  фантастика
[2024-07-11T00:00:06.378+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  триллер
[2024-07-11T00:00:06.380+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  семейный
[2024-07-11T00:00:06.382+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  документальный
[2024-07-11T00:00:06.384+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  биография
[2024-07-11T00:00:06.386+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  боевик
[2024-07-11T00:00:06.387+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  короткометражка
[2024-07-11T00:00:06.389+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  детектив
[2024-07-11T00:00:06.391+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  история
[2024-07-11T00:00:06.394+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  мелодрама
[2024-07-11T00:00:06.396+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  приключения
[2024-07-11T00:00:06.397+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  музыка
[2024-07-11T00:00:06.399+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  военный
[2024-07-11T00:00:06.401+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  фэнтези
[2024-07-11T00:00:06.402+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  мюзикл
[2024-07-11T00:00:06.404+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  спорт
[2024-07-11T00:00:06.406+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  детский
[2024-07-11T00:00:06.408+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  реальное ТВ
[2024-07-11T00:00:06.410+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  вестерн
[2024-07-11T00:00:06.412+0000] {logging_mixin.py:188} INFO - Добавлен жанр:  фильм-нуар
[2024-07-11T00:00:06.417+0000] {logging_mixin.py:188} INFO - Добавлена страна:  США
[2024-07-11T00:00:06.419+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Грузия
[2024-07-11T00:00:06.420+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Россия
[2024-07-11T00:00:06.422+0000] {logging_mixin.py:188} INFO - Добавлена страна:  СССР
[2024-07-11T00:00:06.424+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Чехия
[2024-07-11T00:00:06.427+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Италия
[2024-07-11T00:00:06.429+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Испания
[2024-07-11T00:00:06.431+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Казахстан
[2024-07-11T00:00:06.432+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Греция
[2024-07-11T00:00:06.434+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Франция
[2024-07-11T00:00:06.436+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Япония
[2024-07-11T00:00:06.437+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Нидерланды
[2024-07-11T00:00:06.439+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Швейцария
[2024-07-11T00:00:06.441+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Австралия
[2024-07-11T00:00:06.442+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Словения
[2024-07-11T00:00:06.444+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Хорватия
[2024-07-11T00:00:06.446+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Латвия
[2024-07-11T00:00:06.448+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Великобритания
[2024-07-11T00:00:06.449+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Австрия
[2024-07-11T00:00:06.451+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Чили
[2024-07-11T00:00:06.453+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Португалия
[2024-07-11T00:00:06.454+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Германия
[2024-07-11T00:00:06.456+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Словакия
[2024-07-11T00:00:06.458+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Китай
[2024-07-11T00:00:06.460+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Беларусь
[2024-07-11T00:00:06.461+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Индия
[2024-07-11T00:00:06.463+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Алжир
[2024-07-11T00:00:06.465+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Мексика
[2024-07-11T00:00:06.466+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Канада
[2024-07-11T00:00:06.468+0000] {logging_mixin.py:188} INFO - Добавлена страна:  ОАЭ
[2024-07-11T00:00:06.469+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Турция
[2024-07-11T00:00:06.471+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Коста-Рика
[2024-07-11T00:00:06.473+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Исландия
[2024-07-11T00:00:06.475+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Норвегия
[2024-07-11T00:00:06.477+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Израиль
[2024-07-11T00:00:06.478+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Украина
[2024-07-11T00:00:06.480+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Аргентина
[2024-07-11T00:00:06.482+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Гонконг
[2024-07-11T00:00:06.483+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Бельгия
[2024-07-11T00:00:06.485+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Венгрия
[2024-07-11T00:00:06.486+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Таиланд
[2024-07-11T00:00:06.494+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Польша
[2024-07-11T00:00:06.496+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Дания
[2024-07-11T00:00:06.498+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Швеция
[2024-07-11T00:00:06.500+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Эстония
[2024-07-11T00:00:06.502+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Кыргызстан
[2024-07-11T00:00:06.503+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Новая Зеландия
[2024-07-11T00:00:06.505+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Корея Южная
[2024-07-11T00:00:06.509+0000] {logging_mixin.py:188} INFO - Добавлена страна:  ЮАР
[2024-07-11T00:00:06.511+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Бразилия
[2024-07-11T00:00:06.512+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Филиппины
[2024-07-11T00:00:06.514+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Мальта
[2024-07-11T00:00:06.516+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Уругвай
[2024-07-11T00:00:06.517+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Ирландия
[2024-07-11T00:00:06.519+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Ливан
[2024-07-11T00:00:06.520+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Болгария
[2024-07-11T00:00:06.522+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Доминикана
[2024-07-11T00:00:06.525+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Чехословакия
[2024-07-11T00:00:06.527+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Сербия
[2024-07-11T00:00:06.529+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Германия (ГДР)
[2024-07-11T00:00:06.530+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Кипр
[2024-07-11T00:00:06.532+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Тайвань
[2024-07-11T00:00:06.534+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Люксембург
[2024-07-11T00:00:06.535+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Румыния
[2024-07-11T00:00:06.537+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Колумбия
[2024-07-11T00:00:06.543+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.543+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Азербайджан
[2024-07-11T00:00:06.545+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.546+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Вьетнам
[2024-07-11T00:00:06.547+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.547+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Марокко
[2024-07-11T00:00:06.549+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.549+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Тунис
[2024-07-11T00:00:06.551+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.551+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Югославия
[2024-07-11T00:00:06.553+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.553+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Пакистан
[2024-07-11T00:00:06.555+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.555+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Перу
[2024-07-11T00:00:06.557+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.557+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Индонезия
[2024-07-11T00:00:06.559+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.560+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Малайзия
[2024-07-11T00:00:06.562+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.564+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Германия (ФРГ)
[2024-07-11T00:00:06.566+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.567+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Литва
[2024-07-11T00:00:06.568+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.569+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Армения
[2024-07-11T00:00:06.570+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.570+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Иран
[2024-07-11T00:00:06.572+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.572+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Финляндия
[2024-07-11T00:00:06.574+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.575+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Босния и Герцеговина
[2024-07-11T00:00:06.577+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.705+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Саудовская Аравия
[2024-07-11T00:00:06.707+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.708+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Катар
[2024-07-11T00:00:06.709+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.710+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Сингапур
[2024-07-11T00:00:06.713+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.713+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Эквадор
[2024-07-11T00:00:06.715+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.715+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Египет
[2024-07-11T00:00:06.717+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.717+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Багамы
[2024-07-11T00:00:06.719+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.719+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Пуэрто Рико
[2024-07-11T00:00:06.721+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.726+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Монако
[2024-07-11T00:00:06.728+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.728+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Руанда
[2024-07-11T00:00:06.730+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.730+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Ватикан
[2024-07-11T00:00:06.731+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.732+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Панама
[2024-07-11T00:00:06.733+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.733+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Молдова
[2024-07-11T00:00:06.735+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.735+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Аруба
[2024-07-11T00:00:06.737+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.737+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Монголия
[2024-07-11T00:00:06.739+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.739+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Косово
[2024-07-11T00:00:06.741+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.741+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Северная Македония
[2024-07-11T00:00:06.743+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.743+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Албания
[2024-07-11T00:00:06.745+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.745+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Папуа - Новая Гвинея
[2024-07-11T00:00:06.747+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.747+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Венесуэла
[2024-07-11T00:00:06.748+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.749+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Остров Мэн
[2024-07-11T00:00:06.750+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.750+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Кения
[2024-07-11T00:00:06.752+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:140: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data.loc[:, country] = data["countries"].apply(lambda x: 1 if country in x else 0)

[2024-07-11T00:00:06.752+0000] {logging_mixin.py:188} INFO - Добавлена страна:  Иордания
[2024-07-11T00:00:06.755+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data[f"{feature}_transformed"] = le.transform(data[feature])

[2024-07-11T00:00:06.765+0000] {base.py:84} INFO - Using connection ID 'minio' for task execution.
[2024-07-11T00:00:06.765+0000] {connection_wrapper.py:384} INFO - AWS Connection (conn_id='minio', conn_type='aws') credentials retrieved from login and password.
[2024-07-11T00:00:06.974+0000] {warnings.py:110} WARNING - /opt/airflow/dags/tasks/preprocess_data.py:55: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data[f"{feature}_transformed"] = le.transform(data[feature])

[2024-07-11T00:00:06.981+0000] {base.py:84} INFO - Using connection ID 'minio' for task execution.
[2024-07-11T00:00:06.982+0000] {connection_wrapper.py:384} INFO - AWS Connection (conn_id='minio', conn_type='aws') credentials retrieved from login and password.
[2024-07-11T00:00:07.069+0000] {base.py:84} INFO - Using connection ID 'minio' for task execution.
[2024-07-11T00:00:07.069+0000] {connection_wrapper.py:384} INFO - AWS Connection (conn_id='minio', conn_type='aws') credentials retrieved from login and password.
[2024-07-11T00:00:07.213+0000] {base.py:84} INFO - Using connection ID 'minio' for task execution.
[2024-07-11T00:00:07.215+0000] {connection_wrapper.py:384} INFO - AWS Connection (conn_id='minio', conn_type='aws') credentials retrieved from login and password.
[2024-07-11T00:00:07.354+0000] {python.py:237} INFO - Done. Returned value was: None
[2024-07-11T00:00:07.354+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2024-07-11T00:00:07.362+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=model_training_v81, task_id=preprocess_data, run_id=scheduled__2024-07-10T00:00:00+00:00, execution_date=20240710T000000, start_date=20240711T000006, end_date=20240711T000007
[2024-07-11T00:00:07.382+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2024-07-11T00:00:07.394+0000] {taskinstance.py:3498} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2024-07-11T00:00:07.396+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
